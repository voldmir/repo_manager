/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: files.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace api {
    export class Files extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            files?: Files.File[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
            }
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, Files.File, 1) as Files.File[];
        }
        set files(value: Files.File[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            files?: ReturnType<typeof Files.File.prototype.toObject>[];
        }): Files {
            const message = new Files({});
            if (data.files != null) {
                message.files = data.files.map(item => Files.File.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                files?: ReturnType<typeof Files.File.prototype.toObject>[];
            } = {};
            if (this.files != null) {
                data.files = this.files.map((item: Files.File) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.files.length)
                writer.writeRepeatedMessage(1, this.files, (item: Files.File) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Files {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Files();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Files.File.deserialize(reader), Files.File));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Files {
            return Files.deserialize(bytes);
        }
    }
    export namespace Files {
        export class File extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                name?: string;
            }): File {
                const message = new File({});
                if (data.name != null) {
                    message.name = data.name;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new File();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): File {
                return File.deserialize(bytes);
            }
        }
    }
    export class RPM extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            version?: string;
            release?: string;
            architecture?: string;
            distribution?: string;
            groups?: string[];
            size?: number;
            license?: string;
            source?: string[];
            build_time?: string;
            build_host?: string;
            vendor?: string;
            packager?: string;
            url?: string;
            summary?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("release" in data && data.release != undefined) {
                    this.release = data.release;
                }
                if ("architecture" in data && data.architecture != undefined) {
                    this.architecture = data.architecture;
                }
                if ("distribution" in data && data.distribution != undefined) {
                    this.distribution = data.distribution;
                }
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("license" in data && data.license != undefined) {
                    this.license = data.license;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("build_time" in data && data.build_time != undefined) {
                    this.build_time = data.build_time;
                }
                if ("build_host" in data && data.build_host != undefined) {
                    this.build_host = data.build_host;
                }
                if ("vendor" in data && data.vendor != undefined) {
                    this.vendor = data.vendor;
                }
                if ("packager" in data && data.packager != undefined) {
                    this.packager = data.packager;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get release() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set release(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get architecture() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set architecture(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get distribution() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set distribution(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get groups() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set groups(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get license() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set license(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set source(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get build_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set build_time(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get build_host() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set build_host(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get vendor() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set vendor(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get packager() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set packager(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        static fromObject(data: {
            name?: string;
            version?: string;
            release?: string;
            architecture?: string;
            distribution?: string;
            groups?: string[];
            size?: number;
            license?: string;
            source?: string[];
            build_time?: string;
            build_host?: string;
            vendor?: string;
            packager?: string;
            url?: string;
            summary?: string;
            description?: string;
        }): RPM {
            const message = new RPM({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.release != null) {
                message.release = data.release;
            }
            if (data.architecture != null) {
                message.architecture = data.architecture;
            }
            if (data.distribution != null) {
                message.distribution = data.distribution;
            }
            if (data.groups != null) {
                message.groups = data.groups;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.license != null) {
                message.license = data.license;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.build_time != null) {
                message.build_time = data.build_time;
            }
            if (data.build_host != null) {
                message.build_host = data.build_host;
            }
            if (data.vendor != null) {
                message.vendor = data.vendor;
            }
            if (data.packager != null) {
                message.packager = data.packager;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                version?: string;
                release?: string;
                architecture?: string;
                distribution?: string;
                groups?: string[];
                size?: number;
                license?: string;
                source?: string[];
                build_time?: string;
                build_host?: string;
                vendor?: string;
                packager?: string;
                url?: string;
                summary?: string;
                description?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.release != null) {
                data.release = this.release;
            }
            if (this.architecture != null) {
                data.architecture = this.architecture;
            }
            if (this.distribution != null) {
                data.distribution = this.distribution;
            }
            if (this.groups != null) {
                data.groups = this.groups;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.license != null) {
                data.license = this.license;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.build_time != null) {
                data.build_time = this.build_time;
            }
            if (this.build_host != null) {
                data.build_host = this.build_host;
            }
            if (this.vendor != null) {
                data.vendor = this.vendor;
            }
            if (this.packager != null) {
                data.packager = this.packager;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (this.release.length)
                writer.writeString(3, this.release);
            if (this.architecture.length)
                writer.writeString(4, this.architecture);
            if (this.distribution.length)
                writer.writeString(5, this.distribution);
            if (this.groups.length)
                writer.writeRepeatedString(6, this.groups);
            if (this.size != 0)
                writer.writeUint64(7, this.size);
            if (this.license.length)
                writer.writeString(8, this.license);
            if (this.source.length)
                writer.writeRepeatedString(9, this.source);
            if (this.build_time.length)
                writer.writeString(10, this.build_time);
            if (this.build_host.length)
                writer.writeString(11, this.build_host);
            if (this.vendor.length)
                writer.writeString(12, this.vendor);
            if (this.packager.length)
                writer.writeString(13, this.packager);
            if (this.url.length)
                writer.writeString(14, this.url);
            if (this.summary.length)
                writer.writeString(15, this.summary);
            if (this.description.length)
                writer.writeString(16, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RPM {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RPM();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        message.release = reader.readString();
                        break;
                    case 4:
                        message.architecture = reader.readString();
                        break;
                    case 5:
                        message.distribution = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.size = reader.readUint64();
                        break;
                    case 8:
                        message.license = reader.readString();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.build_time = reader.readString();
                        break;
                    case 11:
                        message.build_host = reader.readString();
                        break;
                    case 12:
                        message.vendor = reader.readString();
                        break;
                    case 13:
                        message.packager = reader.readString();
                        break;
                    case 14:
                        message.url = reader.readString();
                        break;
                    case 15:
                        message.summary = reader.readString();
                        break;
                    case 16:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RPM {
            return RPM.deserialize(bytes);
        }
    }
}
